#!/usr/bin/env node

/* eslint eslint-comments/no-use: off */
/* eslint-disable no-console */
/* eslint-disable github/no-then */

import 'dotenv/config'

import {writeFile} from 'node:fs/promises'

// @ts-expect-error this file doesnt have types
import prettierConfig from '@github/prettier-config'
import {format} from 'prettier'

const TOKEN = process.env.GITHUB_TOKEN
if (!TOKEN) {
  console.error('GITHUB_TOKEN is not set')
  process.exit(1)
}

const models = await fetch('https://models.github.ai/catalog/models', {
  headers: {
    Authorization: `Bearer ${TOKEN}`,
  },
}).then(r => r.json())

type Model = {id: string; supported_output_modalities: string[]}
const output = {
  chat: [] as Model[],
  embeddings: [] as Model[],
}

for (const model of models) {
  const modalities = model.supported_output_modalities
  if (modalities.includes('text')) {
    output.chat.push(model)
  }
  if (modalities.includes('embeddings')) {
    output.embeddings.push(model)
  }
}

console.log(`Found ${models.length} models in the catalog`)
console.log(`\tChat: ${output.chat.length}`)
console.log(`\tEmbeddings: ${output.embeddings.length}`)

const result = `// Generated by script/sync-model-id.ts

/**
 * GitHub Models that support chat and text completion.
 *
 * This list is auto-generated from the GitHub Models API. For the most up-to-date
 * available models, see the {@link https://github.com/marketplace?task=chat-completion&type=models|GitHub Models Catalog}.
 */
export type GitHubModelsChatModelId =
	${output.chat.map(modelId).join('|')}
	| (string & {});

/**
 * GitHub Models that support text-embeddings.
 *
 * This list is auto-generated from the GitHub Models API. For the most up-to-date
 * available models, see the {@link https://github.com/marketplace?task=embeddings&type=models|GitHub Models Catalog}.
 */
export type GitHubModelsEmbeddingModelId =
	${output.embeddings.map(modelId).join('|')}
	| (string & {});
`

const formattedResult = await format(result, {
  parser: 'typescript',
  ...prettierConfig,
})

await writeFile('src/model-id.ts', formattedResult)
console.log('Wrote updated src/model-id.ts')

// ---

function modelId(model: Model) {
  return `'${model.id}'`
}
